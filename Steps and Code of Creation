On Google Cloud Console

Task 1: Create a Cloud Storage Bucket :

   Go to Navigation -> Cloud Storage -> Buckets

   Create a Bucket

   Bucket name: picture-album

   Choose Fine-grained for access control
   (The fine-grained option enables you to use IAM and Access Control Lists.)

   Wait for the Bucket to be created

Task 2: Create a Pub/Sub Topic ;

   Go to Navigation -> Pub/Sub -> Topics

   Create a Pub/Sub Topic and it's Subscription

   Topic name: picture-album-topic
   
   Wait for the Topic to be created

Task 3: Create the Cloud Function :
 
   Go to Navigation -> Cloud Functions
   
   Create Function
   
   Function Name: picture-album-creator-function
   
   Region: us-west2
   
   Set the Trigger type to Cloud Storage
   
   Select the Event Type as Finalize/Create
   
   Browse the bucket you have created and click Save
   
   Click on Next
   
   Set Runtime as Node.js 16
   
   Set Entry point as image
   
   Edit and replace the index.js with following :
   
   
   
      /* globals exports, require */
   //jshint strict: false
   //jshint esversion: 6
   "use strict";
   const crc32 = require("fast-crc32c");
   const { Storage } = require('@google-cloud/storage');
   const gcs = new Storage();
   const { PubSub } = require('@google-cloud/pubsub');
   const imagemagick = require("imagemagick-stream");
   exports.thumbnail = (event, context) => {
     const fileName = event.name;
     const bucketName = event.bucket;
     const size = "64x64"
     const bucket = gcs.bucket(bucketName);
     const topicName = "picture-album-topic";
     const pubsub = new PubSub();
     if ( fileName.search("64x64_thumbnail") == -1 ){
       // doesn't have a image, get the filename extension
       var filename_split = fileName.split('.');
       var filename_ext = filename_split[filename_split.length - 1];
       var filename_without_ext = fileName.substring(0, fileName.length - filename_ext.length );
       if (filename_ext.toLowerCase() == 'png' || filename_ext.toLowerCase() == 'jpg'){
         // only support png and jpg at this point
         console.log(`Processing Original: gs://${bucketName}/${fileName}`);
         const gcsObject = bucket.file(fileName);
         let newFilename = filename_without_ext + size + '_image.' + filename_ext;
         let gcsNewObject = bucket.file(newFilename);
         let srcStream = gcsObject.createReadStream();
         let dstStream = gcsNewObject.createWriteStream();
         let resize = imagemagick().resize(size).quality(90);
         srcStream.pipe(resize).pipe(dstStream);
         return new Promise((resolve, reject) => {
           dstStream
             .on("error", (err) => {
               console.log(`Error: ${err}`);
               reject(err);
             })
             .on("finish", () => {
               console.log(`Success: ${fileName} â†’ ${newFilename}`);
                 // set the content-type
                 gcsNewObject.setMetadata(
                 {
                   contentType: 'image/'+ filename_ext.toLowerCase()
                 }, function(err, apiResponse) {});
                 pubsub
                   .topic(topicName)
                   .publisher()
                   .publish(Buffer.from(newFilename))
                   .then(messageId => {
                     console.log(`Message ${messageId} published.`);
                   })
                   .catch(err => {
                     console.error('ERROR:', err);
                   });
             });
         });
       }
       else {
         console.log(`gs://${bucketName}/${fileName} is not an image I can handle`);
       }
     }
     else {
       console.log(`gs://${bucketName}/${fileName} already has an image`);
     }
   };
   
   
   
   Edit and replace the index.js with following :
   
   
   
      {
     "name": "images",
     "version": "1.0.0",
     "description": "Create Thumbnail of uploaded image",
     "scripts": {
       "start": "node index.js"
     },
     "dependencies": {
       "@google-cloud/pubsub": "^2.0.0",
       "@google-cloud/storage": "^5.0.0",
       "fast-crc32c": "1.0.4",
       "imagemagick-stream": "4.1.1"
     },
     "devDependencies": {},
     "engines": {
       "node": ">=4.3.2"
     }
   }
   
   
   
   Then, Click Deploy
 
   Wait for the Function to be created and in running state

Task 4: Add Permisssion for the Client

   Go to Navigation -> IAM & Admin -> IAM

   Click Grant Access

   Add email of the Client in Add principals

   In Assign Roles, click Cloud Storage -> Storage Object Viewer

   Click Save

   Wait for 1-2 minutes and the work gets done
   
